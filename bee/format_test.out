================================================================================
Test: basic
yo
num:5
time:5s
time:{5
time:{{

================================================================================
Test: int_format
num:1234567
num:1,234,567
num:234,567
num:-234,567
+1234567
-1234567
+1,234,567
--------------------------------
- int8_t
--------------------------------

Signed:
min:-128
max:127
min:-128
max:127

Unsigned:
min:0
max:255
min:0
max:255
--------------------------------
- int16_t
--------------------------------

Signed:
min:-32768
max:32767
min:-32,768
max:32,767

Unsigned:
min:0
max:65535
min:0
max:65,535
--------------------------------
- int32_t
--------------------------------

Signed:
min:-2147483648
max:2147483647
min:-2,147,483,648
max:2,147,483,647

Unsigned:
min:0
max:4294967295
min:0
max:4,294,967,295
--------------------------------
- int64_t
--------------------------------

Signed:
min:-9223372036854775808
max:9223372036854775807
min:-9,223,372,036,854,775,808
max:9,223,372,036,854,775,807

Unsigned:
min:0
max:18446744073709551615
min:0
max:18,446,744,073,709,551,615

================================================================================
Test: float_format_all_decimals
t(float(1234567.0)) -> 1234567
t(double(1234567.0)) -> 1234567
t(float(-1234567.0)) -> -1234567
t(double(-1234567.0)) -> -1234567
t(0.0) -> 0
t(std::numeric_limits<double>::max()) -> 179769313486231600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
t(std::numeric_limits<double>::min()) -> 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507201
t(std::numeric_limits<double>::infinity()) -> inf
t(-std::numeric_limits<double>::infinity()) -> -inf
t(std::numeric_limits<double>::epsilon()) -> 0.0000000000000002220446049250313
t(0.0 / 0.0) -> nan
t(184467440737095516190000000000000000000.0) -> 184467440737095500000000000000000000000
t(184467440737095516200000000000000000000.0) -> 184467440737095500000000000000000000000
t(1e1) -> 10
t(1e2) -> 100
t(1e3) -> 1000
t(1e4) -> 10000
t(1e5) -> 100000
t(1e17) -> 100000000000000000
t(1e18) -> 1000000000000000000
t(1e19) -> 10000000000000000000
t(1e20) -> 100000000000000000000
t(1e21) -> 1000000000000000000000
t(1e22) -> 10000000000000000000000
t(1e-17) -> 0.00000000000000001
t(1e-18) -> 0.000000000000000001
t(1e-19) -> 0.0000000000000000001
t(1e-20) -> 0.000000000000000000009999999999999999
t(1e-21) -> 0.0000000000000000000009999999999999999
t(1e-22) -> 0.0000000000000000000001

================================================================================
Test: float_format_comma
t(1.e17) -> 100,000,000,000,000,000
t(1.e18) -> 1,000,000,000,000,000,000
t(1.e19) -> 10,000,000,000,000,000,000
t(1.e20) -> 100,000,000,000,000,000,000
t(1.e21) -> 1,000,000,000,000,000,000,000
t(1.e22) -> 10,000,000,000,000,000,000,000
t(123412341.2341234123) -> 123,412,341.234123

================================================================================
Test: float_format_decimals
t(0.9) -> 0.9
t(0.99) -> 0.99
t(0.999) -> 1
t(0.995) -> 1
t(0.994) -> 0.99
t(123412341.2341234123) -> 1.23e8

================================================================================
Test: float_format_sign
t(10) -> +10
t(-10) -> -10
t(1000) -> +1,000
t(-1000) -> -1,000
t(0.18) -> +0.18
t(1000000) -> +1,000,000

================================================================================
Test: raise_on_format_error
Error(Format string ended unexpectedly: '{')
Error(Unexpected character in format: '{6}')
Error(Extra formats in format string: '{}')
Error(Extra formats in format string: '$')
Error(Extra arguments in format: '$')

================================================================================
Test: float_exponential_notation
t(float(1234567.0)) -> 1234567
t(double(1234567.0)) -> 1234567
t(float(-1234567.0)) -> -1234567
t(double(-1234567.0)) -> -1234567
t(0.0) -> 0
t(std::numeric_limits<double>::max()) -> 1.79769313e308
t(std::numeric_limits<double>::min()) -> 2.22507386e-308
t(std::numeric_limits<double>::infinity()) -> inf
t(-std::numeric_limits<double>::infinity()) -> -inf
t(std::numeric_limits<double>::epsilon()) -> 2.22044605e-16
t(0.0 / 0.0) -> nan
t(184467440737095516190000000000000000000.0) -> 1.84467441e38
t(184467440737095516200000000000000000000.0) -> 1.84467441e38
t(1e1) -> 10
t(1e2) -> 100
t(1e3) -> 1000
t(1e4) -> 10000
t(1e5) -> 100000
t(1e6) -> 1000000
t(1e7) -> 10000000
t(1e8) -> 1e8
t(1e9) -> 1e9
t(1e10) -> 1e10
t(1e11) -> 1e11
t(1e12) -> 1e12
t(1e13) -> 1e13
t(1e14) -> 1e14
t(1e15) -> 1e15
t(1e16) -> 1e16
t(1e17) -> 1e17
t(1e18) -> 1e18
t(1e19) -> 1e19
t(1e20) -> 1e20
t(1e21) -> 1e21
t(1e22) -> 1e22
t(1e-1) -> 0.1
t(1e-2) -> 0.01
t(1e-3) -> 0.001
t(1e-4) -> 0.0001
t(1e-5) -> 0.00001
t(1e-6) -> 0.000001
t(1e-7) -> 0.0000001
t(1e-8) -> 0.00000001
t(1e-9) -> 1e-9
t(1e-10) -> 1e-10
t(1e-11) -> 1e-11
t(1e-17) -> 1e-17
t(1e-18) -> 1e-18
t(1e-19) -> 1e-19
t(1e-20) -> 1e-20
t(1e-21) -> 1e-21
t(1e-22) -> 1e-22

================================================================================
Test: float_exact_decimal_places
t(7.0) -> 7.00
t(0.0) -> 0.00
t(700000.0) -> 700000.00
t(7.5) -> 7.50
t(7.55) -> 7.55
t(7.553) -> 7.55
t(0.0700000) -> 0.70
t(0.00007) -> 0.00

================================================================================
Test: float_exact_decimal_places_zero
t(7.0) -> 7
t(700000.0) -> 700000
t(7.5) -> 8
t(7.55) -> 8
t(7.553) -> 8
t(0.0700000) -> 0
t(0.00007) -> 0

